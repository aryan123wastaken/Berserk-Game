import turtle
import random
import time

BREAK_CHANCE = [3, 4, 5, 6]
TURN = 0

def print_letter_by_letter(sentence):
    for char in sentence:
        print(char, end='', flush=True)
        time.sleep(0.05)
    print()

def status(player_stats, enemy_stats):
    print(f"You have {player_stats['HP']} HP left")
    print(f"You have {player_stats['stamina']} stamina left")
    print(f"{enemy_stats['name']} has {enemy_stats['HP']} HP left")

def guide(player_stats, attacks):
    print(f"You have {player_stats['HP']} base health points.\nIf you run out of health you lose.")
    print("You have the following types of attacks: ")
    for attack, details in attacks.items():
        print(f"{attack.capitalize()}: {details['damage']} damage, costs {details['cost']} stamina")
    print("Press (1) To stab, (2) To strike, (3) To unleash a barrage and (4) To parry incoming attack")
    print("If you are out of stamina, you will be unable to fight and automatically lose")

def bar():
    wn = turtle.Screen()
    wn.setup(400, 250)
    wn.title(f"GUTS vs {enemy_stats['name'].capitalize()}")

    HP_bar = turtle.Turtle()
    HP_bar.shape("circle")
    HP_bar.color("light green")
    HP_bar.pensize(10)
    HP_bar.speed(0)
    HP_bar.penup()
    HP_bar.setpos(-200, 100)
    HP_bar.pendown()
    HP_bar.speed(1)
    HP_bar.forward(player_stats['HP'])
    HP_bar.color('white')

    stm_bar = turtle.Turtle()
    stm_bar.shape("circle")
    stm_bar.color("cyan")
    stm_bar.pensize(9)
    stm_bar.speed(0)
    stm_bar.penup()
    stm_bar.setpos(-200, 75)
    stm_bar.pendown()
    stm_bar.speed(1)
    stm_bar.forward(player_stats['stamina'])
    stm_bar.color('white')

    e_bar = turtle.Turtle()
    e_bar.shape("circle")
    e_bar.color("red")
    e_bar.pensize(15)
    e_bar.speed(0)
    e_bar.penup()
    e_bar.setpos(-200, -125)
    e_bar.pendown()
    e_bar.speed(1)
    e_bar.forward(enemy_stats['HP'])
    e_bar.color('white')

    return HP_bar, stm_bar, e_bar

def intro():
    while True:
        user_input = input("Type 'guide' to know how to play the game, or 'play' to start the game: ").lower()
        if user_input == "guide":
            guide(player_stats, attacks)
        elif user_input == "play":
            HP_bar, stm_bar, e_bar = bar()
            fight_1v1(player_stats, enemy_stats, TURN, HP_bar, stm_bar, e_bar)
        else:
            print("Invalid input. Please type 'guide' or 'play'.")
            continue

turn = 0
player_stats = {"HP": 150, "stamina": 100, "name": ''}
enemy_stats = {"HP": 250, "name": "Bazuso", "attacks": [60, 50, 40]}
attacks = {'stab': {"damage": 20, "cost": 10, 'dialogue': f"You slashed {enemy_stats['name']}."},
           'strike': {"damage": 40, "cost": 20, "dialogue": f"You struck {enemy_stats['name']}."},
           'barrage': {"damage": 100, "cost": 50,
                       "dialogue": f"You unleashed a barrage of attacks on {enemy_stats['name']}"},
           'parry': {"damage": 5, "cost": 30, "dialogue": f"You parried {enemy_stats['name']} and took no damage."}}
f_context = "Warrior Bazuso is holding back the mercenaries, you go in the front and challenge Bazuso to a fight."
dialogue = "Heh! How cowardly of you mercenaries to send a child onto the battlefield."
victory_messages = [
    "*CLANK*",
    "Bazuso's axe shattered and he is unable to fight",
    "You kill Bazuso. All the mercenaries rush to the castle"]

def start_fight():
    for i in [3, 2, 1, "FIGHT!"]:
        print(i)
        time.sleep(1)
    HP_bar, stm_bar, e_bar = bar()
    return HP_bar, stm_bar, e_bar

def fight_1v1(player_stats, enemy_stats, TURN, HP_bar, stm_bar, e_bar):
    attack_name = ''
    print_letter_by_letter(f_context)
    time.sleep(2)
    print_letter_by_letter(dialogue)
    time.sleep(1)
    random_atk = random.choice(enemy_stats["attacks"])
    break1 = BREAK_CHANCE
    status(player_stats, enemy_stats)
    while True:
        TURN += 1
        if (player_stats['HP'] <= 0 or player_stats['stamina'] <= 0):
            print("You are unable to battle and lost the fight.")
            break
        elif (enemy_stats['HP'] <= 0):
            print(f"You defeated {enemy_stats['name']}")
            break
        else:
            try:
                choice = int(input(
                    "Press (1) To stab, (2) To strike, (3) To unleash a barrage and (4) To parry incoming attack : "))
                if choice in [1, 2, 3, 4]:
                    attack_name = list(attacks.keys())[choice - 1]
                    move = attacks[attack_name]['damage']
                    player_stats["stamina"] -= attacks[attack_name]['cost']
                    enemy_stats["HP"] -= move
                    if player_stats["stamina"] < attacks[attack_name]["cost"]:
                        print("Not enough stamina for this attack.")
                        continue
                    elif choice == 1:
                        print(attacks[attack_name]['dialogue'])
                        print(f"{enemy_stats['name']} responded with an attack.")
                        while True:
                            e_bar.backward(move)
                            stm_bar.backward(player_stats["stamina"])
                            player_stats['HP'] -= random_atk
                            HP_bar.backward(random_atk)
                            status(player_stats, enemy_stats)
                            break
                    elif choice == 2:
                        print(attacks[attack_name]['dialogue'])
                        print(f"{enemy_stats['name']} responded with an attack.")
                        while True:
                            e_bar.backward(move)
                            stm_bar.backward(player_stats["stamina"])
                            player_stats['HP'] -= random_atk
                            HP_bar.backward(random_atk)
                            status(player_stats, enemy_stats)
                            break
                    elif choice == 3:
                        print(attacks[attack_name]['dialogue'])
                        print(f"{enemy_stats['name']} responded with an attack.")
                        while True:
                            e_bar.backward(move)
                            stm_bar.backward(player_stats["stamina"])
                            player_stats['HP'] -= random_atk
                            HP_bar.backward(random_atk)
                            status(player_stats, enemy_stats)
                            break
                    elif choice == 4:
                        if break1 == BREAK_CHANCE:
                            print(f"{enemy_stats['name']} broke through your defence.")
                            while True:
                                random_atk = 30
                                HP_bar.backward(random_atk)
                                stm_bar.backward(player_stats["stamina"])
                                player_stats['HP'] -= random_atk
                                status(player_stats, enemy_stats)
                                break
                        else:
                            print(attacks[attack_name]['dialogue'])
                            print(f"{enemy_stats['name']} seems to be getting angry.")
                            while True:
                                random_attack = 0
                                e_bar.backward(5)
                                stm_bar.backward(player_stats["stamina"])
                                player_stats['HP'] -= random_atk
                                status(player_stats, enemy_stats)
                                break
                    else:
                        print("Invalid choice, try again.")
                        continue
            except ValueError:
                print("Please enter a number.")

def main():
    intro()

main()
